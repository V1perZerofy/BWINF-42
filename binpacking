import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def parse_input_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    
    bin_size = tuple(map(int, lines[0].strip().split()))
    num_boxes = int(lines[1].strip())
    boxes = [tuple(map(int, line.strip().split())) for line in lines[2:]]
    
    if len(boxes) != num_boxes:
        print("Warning: Number of boxes does not match the count specified.")
    
    return bin_size, boxes


class Bin:
    def __init__(self, size):
        self.size = size
        self.grid = [[[0 for _ in range(size)] for _ in range(size)] for _ in range(size)]
        # Block the center 1x1x1 cube
        center = size // 2
        self.grid[center][center][center] = 2

    def place_box(self, x, y, z, x_len, y_len, z_len):
        if x + x_len > self.size or y + y_len > self.size or z + z_len > self.size:
            return False

        for i in range(x, x + x_len):
            for j in range(y, y + y_len):
                for k in range(z, z + z_len):
                    if self.grid[i][j][k] != 0:
                        return False

        for i in range(x, x + x_len):
            for j in range(y, y + y_len):
                for k in range(z, z + z_len):
                    self.grid[i][j][k] = 1
        return True

import numpy as np

def plot_bin(bin):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    #add block of bin size
    
    for x in range(bin.size):
        for y in range(bin.size):
            for z in range(bin.size):
                if bin.grid[x][y][z] != 0:
                    color = 'blue' if bin.grid[x][y][z] == 1 else 'red'
                    x_range = np.array([x, x + 1])
                    y_range = np.array([y, y + 1])
                    z_range = np.array([z, z + 1])

                    xx, yy = np.meshgrid(x_range, y_range)

                    zz = z_range[0] * np.ones(xx.shape)
                    ax.plot_surface(xx, yy, zz, color=color)

                    zz = z_range[1] * np.ones(xx.shape)
                    ax.plot_surface(xx, yy, zz, color=color)

                    yy, zz = np.meshgrid(y_range, z_range)

                    xx = x_range[0] * np.ones(yy.shape)
                    ax.plot_surface(xx, yy, zz, color=color)

                    xx = x_range[1] * np.ones(yy.shape)
                    ax.plot_surface(xx, yy, zz, color=color)

                    xx, zz = np.meshgrid(x_range, z_range)

                    yy = y_range[0] * np.ones(xx.shape)
                    ax.plot_surface(xx, yy, zz, color=color)

                    yy = y_range[1] * np.ones(xx.shape)
                    ax.plot_surface(xx, yy, zz, color=color)

    plt.show()


def first_fit_algorithm(boxes, bin):
    for box in boxes:
        x_len, y_len, z_len = box
        for x in range(bin.size):
            for y in range(bin.size):
                for z in range(bin.size):
                    if bin.place_box(x, y, z, x_len, y_len, z_len):
                        print(f"Placed box of dimensions {box} at ({x}, {y}, {z})")
                        return
        print(f"Could not place box of dimensions {box}")

file_name = "Input/bin1.txt"
size, boxes = parse_input_file(file_name)

# Create bin of specified size
bin = Bin(size[0])
# Boxes to be packed (x_len, y_len, z_len)
#boxes = [(2, 2, 2), (2, 3, 1), (1, 1, 1), (3, 2, 2), (1, 2, 1), (2, 2, 1), (1, 1, 2), (2, 1, 1), (1, 2, 2), (1, 1, 1)]

# Apply first fit algorithm and plot each time to visualize the placement
for box in boxes:
    first_fit_algorithm([box], bin)
    plot_bin(bin)
